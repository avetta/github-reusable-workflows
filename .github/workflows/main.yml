# action.yml
name: 'Custom Github Action to Update Deployment YAML files'

on:
  workflow_call:
    inputs:
      scala_version:
        description: scala version
        required: false
        type: string
        default: 'latest' 
      node_version:
        description: node_version
        required: false
        type: string
        default: 'latest'  
      git_user:
        description: username to access github repo
        required: true
        type: string
      app_name:
        description: App name to be update
        required: true
        type: string
      branch_name:
        description: branch_name
        required: true
        type: string
      docker_tag:
        description: docker_tag
        required: true
        type: string 
      github_tag:
        description: github_tag
        required: false
        type: string  
      jenkins_user:
        description: Jenkins user
        required: true
        type: string
      GITHUB_COMMIT:
        description: commit id
        required: true
        type: string
      GITHUB_BUILD_NUMBER:
        description: github build number
        required: true
        type: string 
      embed_apm:
        description: embed_apm
        required: false
        type: string
      java:
        description: java
        required: false
        type: string 
      ui:
        description: ui
        required: false
        type: string
      npm_test:
        description: npm_test
        required: false
        type: string 
      docker_stage:
        description: docker_stage
        required: false
        type: string
      code_coverage:
        description: code_coverage
        required: false
        type: string
      cache_sbt:
        description: cache_sbt
        required: false
        type: string   
      docker_context:
        description: docker file path
        required: false
        type: string
      docker_run:
        description: docker_run
        required: false
        type: string  
      stage_value:
        description: docker stage_value
        required: false
        type: string  
      clean_coverage:
        description: clean_coverage
        required: false
        type: string 
      coverage_report:
        description: coverage_report
        required: false
        type: string   
        
    secrets:
      git_password:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      jenkins_url:
        required: true 
      jenkins_password:
        required: true 
      JFROG_USERNAME:
        required: false
      JFROG_PASSWORD:
        required: false    
        
jobs:
  build-and-push-docker-image:
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [adopt@1.8]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0    
          
      - name: setting values for steps
        id: values
        run: |
          echo '::set-output name=ui::'${{inputs.ui}} 
          echo '::set-output name=java::'${{inputs.java}}
          echo '::set-output name=jobservice::'${{inputs.jobservice}}
          echo '::set-output name=branch_name::'${{inputs.branch_name}}
          echo '::set-output name=github_tag::'${{inputs.github_tag}}
          echo '::set-output name=java::'${{inputs.java}}
          echo '::set-output name=docker_stage::'${{inputs.docker_stage}}
          echo '::set-output name=code_coverage::'${{inputs.code_coverage}}
          echo '::set-output name=npm_test::'${{inputs.npm_test}}
          echo '::set-output name=cache_sbt::'${{inputs.cache_sbt}}
          
      - name: Some check on branch
        id: branch_check
        run: |
          if [ -z "${{ steps.values.outputs.github_tag }}" ]
          then
                echo "\${{ steps.values.outputs.github_tag }} is empty"
          else
                echo "::set-output name=env_name::qa"
          fi
          if [ "${{ steps.values.outputs.branch_name }}" = "feature" ]; then
            echo "::set-output name=env_name::dev"
          fi
          if [ "${{ steps.values.outputs.branch_name }}" = "nightly" ]; then
            echo "::set-output name=env_name::int"
          fi
          if [ "${{ steps.values.outputs.branch_name }}" = "release" ]; then
            echo "::set-output name=env_name::qa"
          fi
          if [ "${{ steps.values.outputs.branch_name }}" = "patch" ]; then
            echo "::set-output name=env_name::qa"
          fi    
          
      - name: Setup Java and Scala
        if: "${{ steps.values.outputs.java == 'true'}}"
        uses: olafurpg/setup-scala@v10
        with:
          java-version: ${{ matrix.java }}    

      - name: Use Node.js ${{inputs.node-version}}
        if: "${{ steps.values.outputs.ui == 'true'}}"
        uses: actions/setup-node@v3
        with:
          node-version: ${{inputs.node-version}}
          cache: 'npm'
          
      - name: Cache Node Modules
        if: "${{ steps.values.outputs.ui == 'true'}}"
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          
      - name: Cache sbt
        if: "${{ steps.values.outputs.cache_sbt == 'true'}}"
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier/cache/v1
            ~/.cache/coursier/v1
            ~/AppData/Local/Coursier/Cache/v1
            ~/Library/Caches/Coursier/v1
          key: ${{ runner.os }}-sbt-cache-v2-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}    
          
      - name: npm install
        if: "${{ steps.cache.outputs.cache-hit != 'true' &&  steps.values.outputs.ui == 'true'}}"
        run: npm install

      - name: Run list and prettier and elm-format and run build
        if: "${{ steps.values.outputs.ui == 'true'}}"
        run: |
          npm run lint
          npx prettier --check '{config,server,src/static}/**/*.{css,html,js,json,ts}'
          npx elm-format src --validate
          npm run build
          
      - name: code coverage and stage docker file 
        if: "${{ steps.values.outputs.code_coverage == 'true'}}"
        run: |
          export JFROG_USER=${{secrets.JFROG_USERNAME}}
          export JFROG_PASSWORD=${{secrets.JFROG_PASSWORD}}
          export JFROG_RO_USER=${{secrets.JFROG_USERNAME}}
          export JFROG_RO_PASSWORD=${{secrets.JFROG_PASSWORD}}
          ${{inputs.clean_coverage}}
          ${{inputs.coverage_report}}
          
      - name: code coverage and stage docker file
        if: "${{ steps.values.outputs.docker_stage == 'true'}}"
        run: |
          export JFROG_USER=${{secrets.JFROG_USERNAME}}
          export JFROG_PASSWORD=${{secrets.JFROG_PASSWORD}}
          export JFROG_RO_USER=${{secrets.JFROG_USERNAME}}
          export JFROG_RO_PASSWORD=${{secrets.JFROG_PASSWORD}}
          ${{inputs.docker_run}}
    
          
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
          
      - name: set version files
        id: setversion
        run: |
          # Check if $propertiesFile file exists. If not, create file
            export conf="./conf"
            if [ -d $conf ];
            then
              echo "File $conf exists."
            else
              echo "File $conf does not exist. Creating conf directory"
              mkdir ./conf
            fi

            # Update $propertiesFile
            export propertiesFile="./conf/serviceVersion.properties"
            echo "Writing commit ID and build # to conf files."
            echo "tag=${{inputs.DOCKER_TAG}}" | sudo tee -a $propertiesFile
            echo "commit=${{inputs.GITHUB_COMMIT}}" | sudo tee -a $propertiesFile
            echo "buildId=${{inputs.GITHUB_BUILD_NUMBER}}" | sudo tee -a $propertiesFile
            echo "Writing commit ID and build # to version.json file"
            echo \{\"buildId\":\"${{inputs.GITHUB_BUILD_NUMBER}}\",\"commit\":\"${{inputs.GITHUB_COMMIT}}\",\"tag\":\"${{inputs.DOCKER_TAG}}\"\} > ./version.json
            # Copy in file to conf directory for Play builds
            cp ./version.json ./conf/version.json
            # Output for verification purposes
            echo "Checking parameter values in $propertiesFile"
            echo "Parameters in $propertiesFile"
            cat $propertiesFile  
            echo ${{inputs.embed_apm}}
            echo '::set-output name=embed_apm::'${{inputs.embed_apm}}
          
      - name: Build image and push to DockerHub
        if: "${{ steps.setversion.outputs.embed_apm == 'false' &&  github.event_name != 'pull_request'}}"
        id: docker_build1
        uses: docker/build-push-action@v2
        with:
           # relative path to the place where source code with Dockerfile is located
          context: ${{inputs.docker_context}}
          push: true
           # Note: tags has to be all lower-case
          tags: pics/${{inputs.app_name}}:${{inputs.docker_tag}}
          
      - name: Build image
        if: "${{ steps.setversion.outputs.embed_apm == 'true' &&  github.event_name != 'pull_request'}}"
        id: docker_build2
        uses: docker/build-push-action@v2
        with:
           # relative path to the place where source code with Dockerfile is located
          context: ${{inputs.docker_context}}
          push: false
           # Note: tags has to be all lower-case
          tags: pics/${{inputs.app_name}}:${{inputs.docker_tag}}    
          
      
      - name: EmbedAPM        
        if: "${{ steps.setversion.outputs.embed_apm == 'true' &&  github.event_name != 'pull_request'}}"
        run: |
          curl https://download.newrelic.com/newrelic/java-agent/newrelic-agent/7.5.0/newrelic-java-7.5.0.zip --output newrelic-java-7.5.0.zip
          unzip newrelic-java-7.5.0.zip
          export Dockerfile="./Dockerfile"
          echo "FROM pics/${{inputs.app_name}}:${{inputs.docker_tag}}" | sudo tee -a $Dockerfile
          echo "ENV JAVA_OPTS="-javaagent:/opt/docker/lib/newrelic.jar"" | sudo tee -a $Dockerfile
          echo "ADD ./newrelic/newrelic.jar /opt/docker/lib/" | sudo tee -a $Dockerfile
          echo "ADD ./newrelic/newrelic.yml /opt/docker/lib/" | sudo tee -a $Dockerfile
          ls -ltr
      
      - name: Build image and push to DockerHub
        if: "${{ steps.setversion.outputs.embed_apm == 'true' &&  github.event_name != 'pull_request'}}"
        id: docker_build_push
        uses: docker/build-push-action@v2
        with:
           # relative path to the place where source code with Dockerfile is located
          context: .
          push: true
           # Note: tags has to be all lower-case
          tags: pics/${{inputs.app_name}}:${{inputs.docker_tag}}
          
      - name: Run npm test
        if: "${{ steps.values.outputs.npm_test == 'true'}}"
        run: |
          npm install
          npm run test
          npm prune --production     
              
      - name: Trigger your-awesome-job-name job
        if: github.event_name != 'pull_request'
        run: |  
          environment=${{inputs.environment}}
          if [ -z $environment ]; then
            echo "Deployment configuration not found"
          else
            curl ${{secrets.jenkins_url}}/job/${{ steps.branch_check.outputs.env_name }}-deploy-generic/buildWithParameters \
             --user ${{inputs.jenkins_user}}:${{secrets.jenkins_password}} \
             --data ContainerName=${{inputs.app_name}} --data DockerHubTag=${{inputs.docker_tag}}
          fi    
          
 
