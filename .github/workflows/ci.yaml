name: Avetta UI application Build and Deploy to using Github Actions and ArgoCD
on:
  # run it on push to the default repository  branch
  create:
    branches-ignore:
      - '*'
  push:
    branches:
      - '*'
    tags:
      - '*'
  # run it during pull  request
  pull_request:
    branches:
      - '*'
  # run it during release
  # release:
  #  types: [published, created, edited]
jobs:
  Docker-Build-and-Deploy:
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Environment Name and Tag
        id: gen_tag
        run: |
          REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          if [[ ${GITHUB_REF#refs/heads/} == 'main' ]]; then
            TAG=latest
          else
            #TAG=${GITHUB_REF#refs/heads/}
            TAG=${GITHUB_REF#refs/*/}
          fi
          echo '::set-output name=tag::'$TAG
          echo '::set-output name=repo_name::'${{ github.repository_owner }}/${{ github.event.repository.name }}
          echo '::set-output name=app_name::'${{ github.event.repository.name }}
          echo 'repo name is : '${{ github.repository_owner }}/${{ github.event.repository.name }}
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "Sha: ${{ steps.gen_tag.outputs.sha_short }}"
          IFS='_' read -r -a array <<< "${GITHUB_REF#refs/*/}"
          branchName=${array[0]}
          echo $branchName
          echo '::set-output name=branchName::'$branchName
          
      - name: Get commit tag
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tagName
        with:
          tagRegex: ""  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.

      - name: GIT_TAG_NAME
        run: |
          echo "${{ steps.tagName.outputs.tag }}"
            
          
    outputs:
      repo_name: ${{ steps.gen_tag.outputs.repo_name }}
      app_name: ${{ steps.gen_tag.outputs.app_name }}
      GITHUB_COMMIT: $GITHUB_SHA
      GITHUB_BUILD_NUMBER: $GITHUB_RUN_NUMBER
      branch_name: ${{ steps.gen_tag.outputs.branchName }}
      docker_tag: ${{ steps.gen_tag.outputs.tag }}
      github_tag: ${{ steps.tagName.outputs.tag }}
        

  ReusableWorkflow:
    needs: [Docker-Build-and-Deploy]
    uses: avetta/github-reusable-workflows/.github/workflows/main_test.yml@main # Uses an action in the root directory
    with:
      git_user: avettabot
      app_name: ${{needs.Docker-Build-and-Deploy.outputs.app_name}}
      embed_apm: false
      npm_test: false
      docker_stage: false
      code_coverage: false
      cache_sbt: false
      java: false
      branch_name: ${{needs.Docker-Build-and-Deploy.outputs.branch_name}}
      github_tag: ${{needs.Docker-Build-and-Deploy.outputs.github_tag}}
      docker_tag: ${{needs.Docker-Build-and-Deploy.outputs.docker_tag}}
      docker_context: .
      GITHUB_COMMIT: ${{needs.Docker-Build-and-Deploy.outputs.GITHUB_COMMIT}}
      GITHUB_BUILD_NUMBER: ${{needs.Docker-Build-and-Deploy.outputs.GITHUB_BUILD_NUMBER}}
      
    secrets:
      git_password: ${{secrets.GH_TOKEN}}
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      jenkins_url: ${{secrets.JENKINS_URL}}
      jenkins_password: ${{secrets.AVETTAJENKINS_GITHUB_TOKEN}}
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
